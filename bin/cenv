#!/bin/bash -e

find_this_cenv_command() {
    (echo "${0}" | grep -q '^/') && echo "${0}" || (cd "`pwd`/`dirname \"${0}\"`" && echo "`pwd`/`basename ${0}`")
}
export CENV_BIN=`find_this_cenv_command`

test -f "${HOME}/.cenvrc" && source "${HOME}/.cenvrc"

legacy_default_basedir="${HOME}/.venv"
default_basedir="${HOME}/.cenv"

if [ -e "${legacy_default_basedir}" -a ! -e "${default_basedir}" ]; then
    default_basedir="${legacy_default_basedir}"
fi

export CENV_BASE_DIR="${CENV_BASE_DIR:-${VENV_BASE_DIR:-${default_basedir}}}"
export CENV_USER_MNT="${CENV_USER_MNT:-${VENV_USER_MNT:-/user}}"
export CENV_HOME_MNT="${CENV_HOME_MNT:-${VENV_HOME_MNT:-/homedir}}"
export CENV_VSCS_MNT="${CENV_VSCS_MNT:-${VENV_HOME_MNT:-${HOME}/.vscode-server}}"

if [ "${CENV_BASE_DIR}" = "${legacy_default_basedir}" ]; then
    echo "WARNING: Defaulting to legacy CENV_BASE_DIR=\"\${HOME}/.venv\", please rename \"\${HOME}/.venv\" to \"\${HOME}/.cenv\". Support for \"\${HOME}/.venv\" will be removed in the future!" >&2
fi


set_cenv_runtime() {
    apptainer_cmd=`command -v apptainer || true`
    singularity_cmd=`command -v singularity || true`
    shifter_cmd=`command -v shifter || true`

    export CENV_RUNTIME="${CENV_RUNTIME:-auto}"
    if [ "${CENV_RUNTIME}" = "auto" ] ; then
        if [ -n "${apptainer_cmd}" ] ; then
            export CENV_RUNTIME="apptainer"
        elif [ -n "${singularity_cmd}" ] ; then
            export CENV_RUNTIME="singularity"
        elif  [ -n "${shifter_cmd}" ] ; then
            export CENV_RUNTIME="shifter"
        else
            echo "ERROR: No cenv-compatible container runtime engine (apptainer, singularity or shifter) found." >&2
            exit 1
        fi
    fi

    # echo "DEBUG: Selected container runtime engine ${CENV_RUNTIME}" >&2

    if [ "${CENV_RUNTIME}" = "apptainer" ] ; then
        if [ -z "${apptainer_cmd}" ] ; then
            echo "ERROR: Can't find apptainer executable." >&2
            exit 1
        fi
    elif [ "${CENV_RUNTIME}" = "singularity" ] ; then
        if [ -z "${singularity_cmd}" ] ; then
            echo "ERROR: Can't find singularity executable." >&2
            exit 1
        fi
    elif [ "${CENV_RUNTIME}" = "shifter" ] ; then
        if [ -z "${shifter_cmd}" ] ; then
            echo "ERROR: Can't find shifter executable." >&2
            exit 1
        fi
    else
        echo "ERROR: Unsupported cenv container runtime engine \"${CENV_RUNTIME}\"." >&2
        exit 1
    fi
}

absname() {
    local REL_PATH="$1"
    local REL_DIRNAME="$(dirname "${REL_PATH}")"
    local ABS_DIRNAME="$(\cd "${REL_DIRNAME}" && pwd)"
    if [ -z "$ABS_DIRNAME" ] ; then
        echo "ERROR: Couldn't determine absolute path of \"${REL_DIRNAME}\"" >&2
        return 1
    fi
    local BASENAME="$(basename "$1")"
    if [ "${ABS_DIRNAME}" == "/" ] ; then
        if [ "${BASENAME}" == "/" ] ; then
            echo "/"
        else
            echo "/${BASENAME}"
        fi
    else
        echo "${ABS_DIRNAME}/${BASENAME}"
    fi
}


cenv_help() {
local PROG_NAME=`basename $0`
cat <<EOF
${PROG_NAME} - virtual enviroment management

    ${PROG_NAME} [shell|program [...]]
    ${PROG_NAME} --list
    ${PROG_NAME} --create CENV_NAME APPTAINER_IMAGE.sif
    ${PROG_NAME} --create CENV_NAME SINGULARITY_IMAGE.sif
    ${PROG_NAME} --create CENV_NAME DOCKER_IMAGE

Use and manage virtual environments based on Apptainer (https://apptainer.org)
Singularity (https://sylabs.io) or Shifter
(https://docs.nersc.gov/development/shifter) containers/images.


USAGE
-----

    ${PROG_NAME} CENV_NAME
    ${PROG_NAME} CENV_NAME shell
    ${PROG_NAME} CENV_NAME PROGRAM [ARG...]

Runs either the default action defined for the container image (often, a
shell), otherwise a shell or a program with the given arguments.

    ${PROG_NAME} --list [-v]

List all defined virtual environments. With option \`-v\`, lists for the
names and paths of the virtual environments.

    ${PROG_NAME} --create CENV_NAME APPTAINER_IMAGE[.sif]

Create a virtual enviroment named \`CENV_NAME\` inside
"\$CENV_BASE_DIR/CENV_NAME" and associate it with the Apptainer container
image "Apptainer_IMAGE[.sif]".

    ${PROG_NAME} --create CENV_NAME DOCKER_IMAGE

Create a virtual enviroment named \`CENV_NAME\` inside
"\$CENV_BASE_DIR/CENV_NAME" and associate it with \`DOCKER_IMAGE\` for use
with Shifter.


ENVIRONMENT VARIABLES
---------------------

* CENV_BASE_DIR     Base path for virtual environment directories. Defaults
                    to "\${HOME}/.cenv".

* CENV_USER_MNT     Site-independent mount point in container instance for
                    "user"-directory (located inside virtual environment
                    directory). Defaults to "/user".

* CENV_HOME_MNT     Site-independent mount point in container instance for
                    "\${HOME}". Defaults to "/homedir". "${HOME}" itself will
                    still (depeding on Singularity configuration) be available
                    under it's original path as well.

* CENV_VSCS_MNT     Site-independent mount point in container instance for
                    "\${CENV_USER_MNT}/.vscode-server". Defaults to
                    "\${HOME}/.vscode-server".

* CENV_RUNTIME      cenv container runtime engine, either "apptainer",
                    "singularity" or "shifter" or "auto" (the default).

* CENV_GPU          (Apptainer-only) Select GPU backend, currently may be
                    "cuda", "rocm", "opencl" or "none". If not set, cenv will
                    try to autodetect the appropriate backend.

* CENV_APPTAINER_OPTS  Additional options to pass when running "apptainer", e.g.
                       "-B /some/dir:/some/dir".

* CENV_SHIFTER_OPTS  Additional to pass when running "shifter".

cenv sets the environment variable CENV_BIN to the absolute path to cenv
itself. This can be useful in distributed scenarios, e.g. when generating
batch job scripts that should not rely on cenv being on PATH.


CONFIGURATION FILES
-------------------

* "\$HOME/.cenvrc"  If present, ${PROG_NAME} will "source" this (bash
  compatible) shell script before doing anything else. It's a convenient
  place to set environment variables like CENV_BASE_DIR,
  CENV_APPTAINER_OPTS, etc.

* "\$CENV_BASE_DIR/\$CENV_NAME/cenvrc" Create this file after
  creating the container environment to set up environment-specific options. If
  present, ${PROG_NAME} will "source" this (bash compatible) shell script
  before invoking the container runtime.
EOF
} # swmod_list_usage()


invalid_argument_error() {
    if [ -n "${1}" ] ; then
        echo "ERROR: Invalid arguments in \``basename $0` $@\`." >&2
    else
        echo "ERROR: First argument of \``basename $0`\` must not be empty." >&2
    fi
    echo "Run \``basename $0` --help\` for instructions." >&2
    exit 1
} # swmod_list_usage()


cenv_list() {
    for dir in `echo ${CENV_BASE_DIR}/*/rootfs.* | xargs dirname | grep -v '\*'`; do
        if [ "$1" == "-v" ] ; then
            echo "`basename ${dir}`: ${dir}"
        else
            echo "`basename ${dir}`"
        fi
    done
}


cenv_create() {
    local CENV_NAME="$1"
    local CENV_IMG="$2"
    if [ -z "${CENV_NAME}" -o -z "${CENV_IMG}" ] ; then
        invalid_argument_error "$CENV_NAME_ARG" "$@"
    fi

    if (echo "${CENV_NAME}" | grep -q '\s') ; then
        echo "ERROR: Name of virtual environment must not contain whitespace." >&2
        exit 1
    fi

    local CENV_DIR="${CENV_BASE_DIR}/${CENV_NAME}"
    if [ -e "${CENV_DIR}" ] ; then
        echo "ERROR: Virtual enviromenment \"${CENV_NAME}\" (\"${CENV_DIR}\") already exists." >&2
        exit 1
    fi

    set_cenv_runtime
    if [ "${CENV_RUNTIME}" = "apptainer" ] ||
       [ "${CENV_RUNTIME}" = "singularity" ] ; then
        local CENV_IMG_EXT=""
        if [ -d "${CENV_IMG}" ]; then
            if [ ! -e "${CENV_IMG}/bin/sh" ] ; then
                echo "ERROR: Directory \"CENV_IMG\" doesn't seem to be a Apptainer or Singularity image (doesn't contain \"bin/sh\")." >&2
                exit 1
            fi
        elif [ -f "${CENV_IMG}" ]; then
            local CENV_IMG_BASENAME=`basename "${CENV_IMG}"`
            local CENV_IMG_EXT="${CENV_IMG_BASENAME##*.}"
            case "${CENV_IMG_EXT}" in
                "sif") ;;
                "sqsh") ;;
                "img") ;;
                *)
                    echo "ERROR: Only Apptainer/Singularity images of type directory, \"\*.sif\", \"\*.sqsh\" and \"\*.img\" are supported." >&2
                    exit 1
                    ;;
            esac
        else
            echo "ERROR: Apptainer/Singularity image \"${CENV_IMG}\" doesn't exist or is not a file or directory." >&2
            exit 1
        fi

        CENV_IMG_ABS=`absname "${CENV_IMG}"`

        if [ -z "${CENV_IMG_EXT}" ]; then
            local IMG_LINK_NAME="rootfs"
        else
            local IMG_LINK_NAME="rootfs.${CENV_IMG_EXT}"
        fi

        local IMG_LINK_PATH="${CENV_DIR}/${IMG_LINK_NAME}"
        echo "INFO: Creating virtual environment \"${CENV_NAME}\" in \"${CENV_DIR}\"" >&2
        mkdir -p "${CENV_DIR}"
        ln -s "${CENV_IMG_ABS}" "${IMG_LINK_PATH}"
        if (command -v symlinks >/dev/null) ; then
            echo "INFO: Command \"symlinks\" available, using relative symlink for \"${IMG_LINK_PATH}\"." >&2
            command -v symlinks >/dev/null && symlinks -c -o "${CENV_DIR}" >/dev/null || true
        else
            echo "INFO: Command \"symlinks\" not available, using absolute symlink for \"${IMG_LINK_PATH}\"." >&2
        fi
    elif [ "${CENV_RUNTIME}" = "shifter" ] ; then
        mkdir -p "${CENV_DIR}"
        IMG_LINKFILE="${CENV_DIR}/rootfs.shifter"
        echo "${CENV_IMG}" > "${IMG_LINKFILE}"
    else
        echo "ERROR: cenv internal error." >&2; exit 1
    fi

    echo "Created virtual environment \"${CENV_NAME}\", run \`cenv ${CENV_NAME}\` to try it out." >&2
}


PROG="$0"
CENV_NAME_ARG="$1"

# echo "CENV_BASE_DIR=\"${CENV_BASE_DIR}\"" >&2
# echo "CENV_NAME_ARG=\"${CENV_NAME_ARG}\"" >&2

if [ -z "${CENV_NAME_ARG}" ]; then
    invalid_argument_error "${CENV_NAME_ARG}" "$@"
fi

shift 1
CMD="$1"

if [ "${CENV_NAME_ARG}" = "${CENV_NAME}" ] ; then
    if [ "${CMD}" = "shell" -o -z "${CMD}" ]; then
        echo "Already in cenv ${CENV_NAME}, entering new shell ${SHELL} ..." >&2
        "${SHELL}"
    else
        echo "Note: Already in cenv ${CENV_NAME}." >&2
        exec "$@"
    fi
elif [ "${CENV_NAME_ARG}" = "--help" ] ; then
    cenv_help
elif [ "${CENV_NAME_ARG}" = "--list" ] ; then
    cenv_list "$@"
elif [ "${CENV_NAME_ARG}" = "--create" ] ; then
    cenv_create "$@"
else
    CENV_DIR="${CENV_BASE_DIR}/${CENV_NAME_ARG}"

    if [ -f "${CENV_DIR}/cenvrc" ] ; then
        if [ -f "${CENV_DIR}/.cenvrc" ] ; then
            echo "WARNING: Both \"${CENV_DIR}/cenvrc\" and \"${CENV_DIR}/.cenvrc\" exist, using \"${CENV_DIR}/cenvrc\"." >&2
        fi
        source "${CENV_DIR}/cenvrc"
    elif [ -f "${CENV_DIR}/.cenvrc" ] ; then
        # For backward compatibility:
        source "${CENV_DIR}/.cenvrc"
    fi

    export CENV_NAME="${CENV_NAME_ARG}"
    # Legacy support:
    export VENV_NAME="${CENV_NAME_ARG}"

    if [ "${CMD}" = "shell" ]; then
        shift 1
    elif [ -z "${CMD}" ]; then
        CMD="shell"
    else
        CMD="exec"
    fi

    # Special exports for Python:
    export PYTHONUSERBASE="${CENV_USER_MNT}/.local"

    # Special exports for Jupyter:
    export JUPYTER_CONFIG_DIR="${CENV_USER_MNT}/.jupyter"
    export JUPYTER_DATA_DIR="${CENV_USER_MNT}/.local/share/jupyter"

    # Special exports for GitHub Atom:
    export ATOM_HOME="${CENV_USER_MNT}/.atom"

    # Special exports for Julia:
    export JULIA_PKGDIR="${CENV_USER_MNT}/.julia"
    export JULIA_DEPOT_PATH="${CENV_USER_MNT}/.julia:"
    export JULIA_PKG_DEVDIR="${CENV_USER_MNT}/.julia/dev"

    set_cenv_runtime
    if [ "${CENV_RUNTIME}" = "apptainer" ] ||
       [ "${CENV_RUNTIME}" = "singularity" ]; then

        if [ ! -d "${CENV_DIR}" ]; then
            echo "ERROR: cenv directory \"${CENV_DIR}\" doesn't exist." >&2
            exit 1
        fi

        if [ -d "${CENV_DIR}/rootfs" ]; then
            FS_IMG="${CENV_DIR}/rootfs/"
        elif [ -f "${CENV_DIR}/rootfs.sif" ]; then
            FS_IMG="${CENV_DIR}/rootfs.sif"
        elif [ -f "${CENV_DIR}/rootfs.sqsh" ]; then
            FS_IMG="${CENV_DIR}/rootfs.sqsh"
        elif [ -f "${CENV_DIR}/rootfs.img" ]; then
            FS_IMG="${CENV_DIR}/rootfs.img"
        else
            echo "ERROR: No rootfs found in \"${CENV_DIR}\"." >&2
            exit 1
        fi

        CENV_USER_DIR="${CENV_DIR}/user"
        mkdir -p "${CENV_USER_DIR}"
        mkdir -p "${CENV_USER_DIR}/.vscode-server"

        if [ "${CENV_USER_MNT}" == "none" ] ; then
            CENV_USER_MNT="${CENV_USER_DIR}"
        fi

        if [ "${CENV_RUNTIME}" = "apptainer" ]; then
            EXTRA_OPTS="${CENV_APPTAINER_OPTS}"
        else
            EXTRA_OPTS="${CENV_SINGULARITY_OPTS}"
        fi

        # GPU support:
        CENV_GPU="${CENV_GPU:-$CENV_GPUS}" # Backward compatibility
        if test -z "$CENV_GPU" -o "$CENV_GPU" = "cuda" && (command -v nvidia-smi > /dev/null); then
            echo "INFO: NVIDIA CUDA drivers available, enabeling Apptainer CUDA support" >&2
            EXTRA_OPTS="${EXTRA_OPTS} --nv"
        elif test -z "$CENV_GPU" -o "$CENV_GPU" = "rocm" && (command -v rocminfo > /dev/null); then
            # "--nv" and "--rocm" can't be used together
            echo "INFO: AMD ROCm drivers available, enabeling Apptainer ROCm support" >&2
            EXTRA_OPTS="${EXTRA_OPTS} --rocm"
        elif test "$CENV_GPU" = "opencl" && test -d "/etc/OpenCL/vendors"; then
            # Only mount OpenCL on request
            echo "INFO: OpenCL available, mounting vendors directory" >&2
            EXTRA_OPTS="${EXTRA_OPTS} -B /etc/OpenCL/vendors"
        fi

        if [[ "$XDG_RUNTIME_DIR" == /run/* ]] && [[ -d "$XDG_RUNTIME_DIR" ]]; then
            EXTRA_OPTS="${EXTRA_OPTS} -B $XDG_RUNTIME_DIR"
        fi

        # echo "DEBUG: CENV_DIR=\"${CENV_DIR}\"" >&2
        # echo "DEBUG: CENV_USER_DIR=\"${CENV_USER_DIR}\"" >&2
        # echo "DEBUG: CENV_USER_MNT=\"${CENV_USER_MNT}\"" >&2
        # echo "DEBUG: FS_IMG=\"${FS_IMG}\"" >&2
        # echo "DEBUG: CMD=\"${CMD} $@" >&2

        if (grep -q ' avx2 ' /proc/cpuinfo) ; then
            export OPENBLAS_CORETYPE="Haswell"
        elif (grep -q ' avx ' /proc/cpuinfo) ; then
            export OPENBLAS_CORETYPE="Sandybridge"
        fi

        export SWMOD_INST_BASE="${CENV_USER_MNT}/.local/sw"
        export SWMOD_MODPATH="${SWMOD_INST_BASE}"

        if [ "${CENV_RUNTIME}" = "apptainer" ]; then
            export APPTAINERENV_PS1="[\u@\[\e[1m\]${CENV_NAME}\[\e[m\] cenv] \w > "
            export APPTAINER_SHELL="${APPTAINER_SHELL:-${SHELL}}"
            # Add user bin dir to path:
            export APPTAINERENV_PREPEND_PATH="${CENV_USER_MNT}/.local/bin:"
        else
            export SINGULARITYENV_PS1="[\u@\[\e[1m\]${CENV_NAME}\[\e[m\] cenv] \w > "
            export SINGULARITY_SHELL="${SINGULARITY_SHELL:-${SHELL}}"
            export SINGULARITYENV_PREPEND_PATH="${CENV_USER_MNT}/.local/bin:"
        fi

        export debian_chroot="${CENV_NAME}"

        if [ "${CENV_USER_MNT}" != "${CENV_USER_DIR}" ] ; then
            exec "${CENV_RUNTIME}" "${CMD}" ${EXTRA_OPTS} \
                -B "${CENV_USER_DIR}:${CENV_USER_MNT}" \
                -B "${HOME}:${CENV_HOME_MNT}" \
                -B "${CENV_USER_DIR}/.vscode-server:${CENV_VSCS_MNT}" \
                "${FS_IMG}" "$@"
        else
            exec "${CENV_RUNTIME}" "${CMD}" ${EXTRA_OPTS} \
                "${FS_IMG}" "$@"
        fi
    elif [ "${CENV_RUNTIME}" = "shifter" ] ; then
        EXTRA_OPTS="${CENV_SHIFTER_OPTS}"

        export XDG_RUNTIME_DIR="${TMPDIR:-/tmp}/`whoami`/run"
        mkdir -p "${XDG_RUNTIME_DIR}"

        img_ref_file="${CENV_DIR}/rootfs.shifter"
        if [ ! -f "${img_ref_file}" ] ; then
            echo "ERROR: Missing image reference \"${img_ref_file}\"" >&2; exit 1
        fi
        img_name=`cat "${img_ref_file}"`

        # CENV_USER_DIR="${CENV_DIR}/user"
        # Workaround, shifter volume mounting doesn't seem to like deep directories:
        parent_dir=$(dirname `dirname "${CENV_DIR}"`)
        subst_userdir=".cenv_userdir_${CENV_NAME}"
        if [ ! -e "${CENV_DIR}/user" ] ; then
            ln -s "../../${subst_userdir}" "${CENV_DIR}/user"
        fi
        CENV_USER_DIR="${parent_dir}/${subst_userdir}"
        mkdir -p "${CENV_USER_DIR}"
        mkdir -p "${CENV_USER_DIR}/.vscode-server"

        export PS1="[\u@\[\e[1m\]${CENV_NAME}\[\e[m\] cenv] \w > "

        if [ "${CENV_USER_MNT}" != "${CENV_USER_DIR}" ] ; then
            exec shifter --image="${img_name}" \
                --volume="${CENV_USER_DIR}:${CENV_USER_MNT};${HOME}:${CENV_HOME_MNT}" \
                 ${EXTRA_OPTS} -- "$@"
        else
            exec shifter --image="${img_name}" \
                 ${EXTRA_OPTS} -- "$@"
        fi
    else
        echo "ERROR: cenv internal error." >&2; exit 1
    fi
fi
